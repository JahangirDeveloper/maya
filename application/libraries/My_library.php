<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');/* * @author       Jahangir * * Purpose of this class is to provide all the utilities functions which can be used from any controller.. * */class My_library {    var $languages;    var $arrStatus;    var $CI;    function __construct() {        $this->CI = & get_instance();        $this->arrStatus['Error'] = "";        $this->arrStatus['Info'] = "";        $this->arrStatus['Success'] = "";    }    function time_elapsed_string($ptime) {        $etime = time() - $ptime;        if ($etime < 1) {            return 'Just Now';        }        $a = array(365 * 24 * 60 * 60 => 'year',            30 * 24 * 60 * 60 => 'month',            24 * 60 * 60 => 'day',            60 * 60 => 'hour',            60 => 'minute',            1 => 'second'        );        $a_plural = array('year' => 'years',            'month' => 'months',            'day' => 'days',            'hour' => 'hours',            'minute' => 'minutes',            'second' => 'seconds'        );        foreach ($a as $secs => $str) {            $d = $etime / $secs;            if ($d >= 1) {                $r = round($d);                return $r . ' ' . ($r > 1 ? $a_plural[$str] : $str) . ' ago';            }        }    }    //This funciton will convert the timestamp for javascript .. actually javascript work on ms and php work on seconds.    function timeStampForJs($val) {        return $val . "000";    }    function timeStampForJss($val) {        return date("F j, Y, g:i a", $val);    }    function replace_special($string = false) {        $string = str_replace(' ', '-', $string); // Replaces all spaces with hyphens.        return preg_replace('/[^A-Za-z0-9@:\/.\-]/', '', $string); // Removes special chars.     }    //Convert spaces with plus    function convertSpacesWithPlus($val) {        return str_replace(" ", "+", $val);    }    //Convert js timestamp to php    function timestampJStoPHP($val) {        if (strlen($val) > 5)            return substr($val, 0, strlen($val) - 3);        else            return $val;    }    //Return current timestamp in unix format    function getTime() {        return time();    }    //Return current timestamp in unix format    function getGMTTime($gmt = '') {        /* if (strlen($gmt) > 0)          date_default_timezone_set($gmt);          else          date_default_timezone_set($this->CI->session->userdata('timezone')); */        return time();    }    //Convert date into unix timestamp    function getTimeByDateComponents($date, $month, $year) {        $dt = strtotime($month . '/' . $date . '/' . $year);        return $dt;    }    //Convert date into unix timestamp    function getTimeByDate($date) {        $dt = strtotime($date);        return $dt;    }    function showDate($ts) {        return date('d/m/Y', $ts);    }    //Get Timestamp according to Timezone..    function convertDateToUTC($dt, $time, $gmt) {        //Set timezone because mktime calculate the time according to UTC (GMT+0) .. and we need to store all the times in UTC format..        if (strlen($gmt) > 0)            date_default_timezone_set($gmt);        else            date_default_timezone_set($this->CI->session->userdata('timezone'));        $time = date("H:i:A", strtotime($time));        $arr = explode("/", $dt);        $arrtime = explode(":", $time);        $mktime = mktime($this->fixHours($arrtime[0], $arrtime[2]), $arrtime[1], 0, $arr[1], $arr[0], $arr[2]);        return $mktime;    }    function fixHours($val, $meridian) {        /* if ($meridian == "PM")          return ($val + 12);          else */        return $val;    }    //convert GMT 0 according to GMT value    function getGMTFromUTC($utc, $gmt = '') {        //$mktime = $mktime + (360000 * (+4));        //$time = $utc + (360000 * $gmt);        //echo "getGMTFromUTC After: " . $time . "<br />";        $time = strtotime(date('m/d/Y h:i A', $utc) . " " . $gmt . " hours");        return $time;    }    //Return Images Config Array of particular entity.    function imageConfig($entity, $type) {        return $this->CI->config->config['pics'][$entity][$type];    }    //Return Images Config Object's Attribute    function imageConfigAttribute($entity, $type, $attribute) {        return $this->CI->config->config['pics'][$entity][$type][$attribute];    }    //Return Config array for frontend    function frontendConfig() {        return $this->CI->config->config['frontend'];    }    //Truncate string    function truncate($str, $limit) {        if (strlen($str) > $limit)            return substr($str, 0, $limit) . "...";        else            return $str;    }    //Return Company pic url    function companyProfilePic($val) {        $people = $this->imageConfig('company', 'logo');        if (strlen($val) == 0)            return $people['default'];        else            return $val;    }    //Generate Random String    function generateRandomString($length = 10) {        return substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, $length);    }    function ip_info($ip = NULL, $purpose = "location", $deep_detect = TRUE) {        $output = NULL;        if (filter_var($ip, FILTER_VALIDATE_IP) === FALSE) {            $ip = $_SERVER["REMOTE_ADDR"];            if ($deep_detect) {                if (filter_var(@$_SERVER['HTTP_X_FORWARDED_FOR'], FILTER_VALIDATE_IP))                    $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];                if (filter_var(@$_SERVER['HTTP_CLIENT_IP'], FILTER_VALIDATE_IP))                    $ip = $_SERVER['HTTP_CLIENT_IP'];            }        }        $purpose = str_replace(array("name", "\n", "\t", " ", "-", "_"), NULL, strtolower(trim($purpose)));        $support = array("country", "countrycode", "state", "region", "city", "location", "address");        $continents = array(            "AF" => "Africa",            "AN" => "Antarctica",            "AS" => "Asia",            "EU" => "Europe",            "OC" => "Australia (Oceania)",            "NA" => "North America",            "SA" => "South America"        );        if (filter_var($ip, FILTER_VALIDATE_IP) && in_array($purpose, $support)) {            $ipdat = @json_decode(file_get_contents("http://www.geoplugin.net/json.gp?ip=" . $ip));            if (@strlen(trim($ipdat->geoplugin_countryCode)) == 2) {                switch ($purpose) {                    case "location":                        $output = array(                            "city" => @$ipdat->geoplugin_city,                            "state" => @$ipdat->geoplugin_regionName,                            "country" => @$ipdat->geoplugin_countryName,                            "country_code" => @$ipdat->geoplugin_countryCode,                            "continent" => @$continents[strtoupper($ipdat->geoplugin_continentCode)],                            "continent_code" => @$ipdat->geoplugin_continentCode                        );                        break;                    case "address":                        $address = array($ipdat->geoplugin_countryName);                        if (@strlen($ipdat->geoplugin_regionName) >= 1)                            $address[] = $ipdat->geoplugin_regionName;                        if (@strlen($ipdat->geoplugin_city) >= 1)                            $address[] = $ipdat->geoplugin_city;                        $output = implode(", ", array_reverse($address));                        break;                    case "city":                        $output = @$ipdat->geoplugin_city;                        break;                    case "state":                        $output = @$ipdat->geoplugin_regionName;                        break;                    case "region":                        $output = @$ipdat->geoplugin_regionName;                        break;                    case "country":                        $output = @$ipdat->geoplugin_countryName;                        break;                    case "countrycode":                        $output = @$ipdat->geoplugin_countryCode;                        break;                }            }        }        return $output;    }    public function getLatestRequest($user_id = false, $limit = false, $offset = false) {        $this->CI->db->where("user_id", $user_id);        $this->CI->db->where("status", "pending");        if ($limit) {            $this->CI->db->limit($limit);        }        $qry = $this->CI->db->get("following");        $return_array = array();        if ($qry->num_rows() > 0) {            foreach ($qry->result_array() as $row) {                $data = array(                    "id" => $row['id'],                    "user_id" => $row['user_id'],                    "following_id" => $row['following_id'],                    "created_date" => $row['created_date'],                    "status" => $row['status'],                    "user_detail" => $this->getUserDetail($row['following_id']),                );                $return_array[] = $data;            }        }        return $return_array;    }    public function detectmobile() {        require_once(APPPATH . 'libraries/Mobile_Detect.php');        $detect = new Mobile_Detect;        return $deviceType = ($detect->isMobile() ? ($detect->isTablet() ? 'tablet' : 'phone') : 'computer');    }    public function sendMail($from, $from_name, $to, $subject, $msg) {        require_once(APPPATH . 'libraries/class.phpmailer.php');        error_reporting(E_ALL);        ini_set('display_errors', '1');        // SMTP information Begin        $host = "mail.an-project.org";        $username = "sendmail@an-project.org";        $password = 'gf3fr!@#$R!#YWGVG#%YTWAW24t6urd';        // SMTP information End        $mail = new PHPMailer();        $mail->IsSMTP();        $mail->CharSet = 'UTF-8';        $mail->Host = $host; // SMTP server example        $mail->SMTPDebug = 0;                     // enables SMTP debug information (for testing)        $mail->SMTPAuth = true;                  // enable SMTP authentication        //  $mail->SMTPSecure = "tls";        $mail->Port = 25; // SMTP Port                // set the SMTP port for the GMAIL server        $mail->Username = $username; // SMTP account username example        $mail->Password = $password;        // defaults to using php "mail()"        $mail->SetFrom($from, $from_name);        foreach ($to as $email => $name) {            $mail->AddAddress($email, $name);        }        //$mail->AddAddress($address);        $mail->Subject = $subject;        $mail->AltBody = " "; // optional, comment out and test        $mail->MsgHTML($msg);        if (!$mail->Send()) {            return "Mailer Error: " . $mail->ErrorInfo;        } else {            return "Message sent!";        }    }    public function get_client_ip() {        $ipaddress = '';        if ($_SERVER['HTTP_CLIENT_IP'])            $ipaddress = $_SERVER['HTTP_CLIENT_IP'];        else if ($_SERVER['HTTP_X_FORWARDED_FOR'])            $ipaddress = $_SERVER['HTTP_X_FORWARDED_FOR'];        else if ($_SERVER['HTTP_X_FORWARDED'])            $ipaddress = $_SERVER['HTTP_X_FORWARDED'];        else if ($_SERVER['HTTP_FORWARDED_FOR'])            $ipaddress = $_SERVER['HTTP_FORWARDED_FOR'];        else if ($_SERVER['HTTP_FORWARDED'])            $ipaddress = $_SERVER['HTTP_FORWARDED'];        else if ($_SERVER['REMOTE_ADDR'])            $ipaddress = $_SERVER['REMOTE_ADDR'];        else            $ipaddress = 'UNKNOWN';        return $ipaddress;    }    public function get_time($time = false) {        if ($time == "13") {            return "01:00 PM";        } else if ($time == "14") {            return $time = "02:00 PM";        } else if ($time == "15") {            return $time = "03:00 PM";        } else if ($time == "16") {            return $time = "04:00 PM";        } else if ($time == "17") {            return $time = "05:00 PM";        } else if ($time == "18") {            return $time = "06:00 PM";        } else if ($time == "19") {            return $time = "07:00 PM";        } else if ($time == "20") {            return $time = "08:00 PM";        } else if ($time == "21") {            return $time = "09:00 PM";        } else if ($time == "22") {            return $time = "10:00 PM";        } else if ($time == "23") {            return $time = "11:00 PM";        } else {            return $time = "";        }    }    public function showTimeLeft($time) {        $now = strtotime("now");        $timeDiff = $time - $now;        if ($timeDiff > 0) {            $stl_days = floor($timeDiff / 60 / 60 / 24);            $stl_hours = $timeDiff / 60 / 60 % 24;            $stl_mins = $timeDiff / 60 % 60;            $stl_secs = $timeDiff % 60;            if ($stl_days) {                $text = "Days Left: " . $stl_days . "Day(s)<br>";                if ($stl_hours) {                    $text .= "Time Left: " . $stl_hours . "Hour(s)(till next Day) ";                }            } elseif ($stl_hours) {                $text = $stl_hours . " Hour(s)";                if ($stl_mins) {                    $text .= ", " . $stl_mins . "Minute(s) ";                }            } elseif ($stl_mins) {                $text = $stl_mins . " Minute(s)";                if ($stl_secs) {                    $text .= ", " . $stl_secs . "Second(s) ";                }            } elseif ($stl_secs) {                $text = $stl_secs . " Second(s)";            }        } else {            $text = "Hope you Enjoyed Christmas!";        }        return $text;    }    public function getLanguageParam() {        $url = $_SERVER['REQUEST_URI'];        $lng = getLanguage();        //if (strpos($url, '/en') !== false) {        if ($lng == 'en') {            $this->CI->session->set_userdata('language_frontid', "1");            $this->CI->lang->load("eng", "english");        } else {            $this->CI->session->set_userdata('language_frontid', "2");            $this->CI->lang->load("ar", "arabic");        }    }    public function getLanguageParamVal() {        $url = $_SERVER['REQUEST_URI'];        if (strpos($url, '/en') !== false) {            return "en";        } else {            return "ar";        }    }    public function changelangugeparamurl() {        echo $url = $_SERVER['REQUEST_URI'];        // exit;        if (strpos($url, '/en') !== false) {            $str = str_replace("/en", "/ar", $url);            redirect('http://' . $_SERVER['HTTP_HOST'] . $str);        } else {            $str = str_replace("/en", "/ar", $url);            redirect('http://' . $_SERVER['HTTP_HOST'] . $str);        }    }    public function userIsLogin() {        $islogin = $this->CI->session->userdata('is_login');        if ($islogin == "yes") {            redirect(site_url());        } else {                    }    }    public function getLevel($parent_objective_id) {        $this->CI->db->select("level");        $this->CI->db->where("objectives_id", $parent_objective_id);        $this->CI->db->where("is_active", '1');        $this->CI->db->where("is_delete", '0');        $query = $this->CI->db->get("objectives");        $result = $query->result_array();        if (sizeof($result) > 0) {            return $result[0]["level"];        } else {            return 0;        }    }    public function sendMails($from, $from_name, $to = false, $subject, $msg, $cc = false, $bcc = false, $files = array()) {        require_once(APPPATH . 'libraries/class.phpmailer.php');        error_reporting(E_ALL);        ini_set('display_errors', '1');// SMTP information Begin//        $host = "n1plcpnl0033.prod.ams1.secureserver.net";//        $username = "info@kafaat.me";//        $password = "Info123!@#";// SMTP information End        // SMTP information Begin//        $host = "185.56.88.141";//       $username = "info@kig.ae";//        $password = "Z=oB[.4hfxGJ";        // SMTP information End        $mail = new PHPMailer();        $mail->IsSMTP();        $mail->CharSet = 'UTF-8';        $mail->Host = 'localhost'; // SMTP server example        $mail->SMTPDebug = 1; // enables SMTP debug information (for testing)//        $mail->SMTPAuth = true; // enable SMTP authentication//        $mail->SMTPSecure = "ssl";        $mail->Port = 25; // SMTP Port // set the SMTP port for the GMAIL server        $mail->Username = 'info@kig.ae'; // SMTP account username example        $mail->Password = 'Z=oB[.4hfxGJ';// defaults to using php "mail()"        $mail->SetFrom($from, $from_name);        foreach ($to as $email => $name) {            $mail->AddAddress($email, $name);        }        if ($files != "" && sizeof($files) > 0) {            foreach ($files as $file => $file_name) {                $mail->AddAttachment($file, $file_name);            }        }        if ($cc != "" && sizeof($cc) > 0) {            foreach ($cc as $email => $name) {                $mail->AddCC($email, $name);            }        }        if ($bcc != "" && sizeof($bcc) > 0) {            foreach ($bcc as $email => $name) {                $mail->AddBCC($email, $name);            }        }        $mail->Subject = $subject;        $mail->AltBody = " "; // optional, comment out and test        $mail->MsgHTML($msg);        if (!$mail->Send()) {            return "Mailer Error: " . $mail->ErrorInfo;        } else {            return "Message sent!";        }    }    function geraHash($qtd) {        //Under the string $Caracteres you write all the characters you want to be used to randomly generate the code.        $Caracteres = 'ABCDEFGHIJKLMOPQRSTUVXWYZ0123456789';        $QuantidadeCaracteres = strlen($Caracteres);        $QuantidadeCaracteres--;        $Hash = NULL;        for ($x = 1; $x <= $qtd; $x++) {            $Posicao = rand(0, $QuantidadeCaracteres);            $Hash .= substr($Caracteres, $Posicao, 1);        }        return $Hash;    }    public function create_logs($user_id=false,$table=false,$column=false,$table_row=false,$actions=false) {        $data = array(            "user_id" => $user_id,            "actions" => $actions,            "ip" => $this->CI->input->ip_address(),            "created_date" => time(),        );        if($table){            $data['table'] = $table;        }        if($column){            $data['column'] = $column;        }        if($table_row){            $data['table_row'] = $table_row;        }        $this->CI->db->insert('web_logs', $data);    }    public function checkUrl() {        $organization_id = $this->CI->session->userdata('organization_id');        $this->CI->db->where("organization_id", $organization_id);        $this->CI->db->where("base_url", base_url());        $this->CI->db->where("site_url", site_url());        $query = $this->CI->db->get('config');        if (!$query->num_rows()) {            $data = array(                "organization_id" => $organization_id,                "base_url" => base_url(),                "site_url" => site_url(),                "created_date" => time()            );            $this->CI->db->insert('config', $data);        }    }    }